# .github/workflows/build.yml

name: DH-Blog Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 全局环境变量
env:
  BINARY_NAME: dhblog
  BACKEND_DIR: blog-backend
  FRONTEND_DIR: blog-front

jobs:
  build-and-release:
    name: 🏗️ Build All Platforms
    runs-on: ubuntu-latest
    
    steps:
      # 步骤 1: 拉取代码
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 安装 pnpm (关键修改：版本升级到 10)
      - name: ⚙️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10 # <--- 已更新为 v10，与您本地环境保持一致

      # 步骤 3: 设置 Node.js 环境
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/pnpm-lock.yaml'

      # 步骤 4: 安装前端依赖并构建
      - name: 📦 Build Frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "==> Current directory: $(pwd)"
          echo "==> Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "==> Building frontend..."
          pnpm build

      # 步骤 5: 设置 Go 环境
      - name: ⚙️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/go.sum'

      # 步骤 6: 准备嵌入目录并构建所有平台
      - name: 🛠️ Build Go Binaries for All Platforms
        run: |
          DEPLOY_DIR="build"
          EMBED_DIR="${{ env.BACKEND_DIR }}/internal/frontend/dist"
          
          echo "==> Preparing directories..."
          rm -rf "$DEPLOY_DIR" "$EMBED_DIR"
          mkdir -p "$DEPLOY_DIR" "$EMBED_DIR"
          
          echo "==> Embedding frontend files..."
          cp -r "${{ env.FRONTEND_DIR }}/dist/"* "$EMBED_DIR/"
          
          build_for_platform() {
              local os=$1 arch=$2 ext=$3
              local output_path="$DEPLOY_DIR/${{ env.BINARY_NAME }}${ext}"
              echo "==> Building for $os/$arch..."
              (cd "${{ env.BACKEND_DIR }}" && GOOS=$os GOARCH=$arch go build -ldflags="-s -w" -o "../$output_path" ./cmd/blog-backend)
              if [ $? -eq 0 ]; then
                  echo "✅ Successfully built: $output_path"
              else
                  echo "❌ Failed to build for $os/$arch"
                  exit 1
              fi
          }

          build_for_platform "darwin" "arm64" "-darwin-arm64"
          build_for_platform "windows" "amd64" "-windows-amd64.exe"
          build_for_platform "linux" "amd64" "-linux-amd64"
          
          echo "==> Cleaning up intermediate files..."
          rm -rf "$EMBED_DIR"
          
          echo "==> All builds complete! Artifacts are in the $DEPLOY_DIR directory."

      # 步骤 7: 上传所有构建产物
      - name: ⬆️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dhblog-binaries
          path: build/