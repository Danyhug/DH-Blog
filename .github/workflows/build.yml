# .github/workflows/build.yml

name: DH-Blog Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 全局环境变量
env:
  BINARY_NAME: dhblog
  BACKEND_DIR: blog-backend
  FRONTEND_DIR: blog-front

jobs:
  # 任务一：构建前端并将源码打包，供后续任务使用
  prepare-source:
    name: 📦 Prepare Source with Frontend
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/pnpm-lock.yaml'

      - name: 📦 Build Frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: 📁 Prepare files for embedding
        run: |
          mkdir -p ${{ env.BACKEND_DIR }}/internal/frontend/dist
          cp -r ${{ env.FRONTEND_DIR }}/dist/* ${{ env.BACKEND_DIR }}/internal/frontend/dist/
      
      # 将处理好的完整源码上传，以便构建任务使用
      - name: ⬆️ Upload prepared source
        uses: actions/upload-artifact@v4
        with:
          name: prepared-source
          path: .

  # 任务二：使用矩阵并行构建和上传二进制文件
  build-binaries:
    name: 🛠️ Build for ${{ matrix.os }}/${{ matrix.arch }}
    needs: prepare-source # 依赖于上一个任务
    runs-on: ubuntu-latest
    
    # 构建矩阵策略
    strategy:
      matrix:
        include:
          - os: darwin
            arch: arm64
            ext: "-darwin-arm64"
          - os: windows
            arch: amd64
            ext: "-windows-amd64.exe"
          - os: linux
            arch: amd64
            ext: "-linux-amd64"

    steps:
      # 每个并行任务都需要下载准备好的源码
      - name: ⬇️ Download prepared source
        uses: actions/download-artifact@v4
        with:
          name: prepared-source

      - name: ⚙️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/go.sum'

      # 构建单个二进制文件
      - name: 🏗️ Build Go Binary
        run: |
          mkdir -p build
          (cd ${{ env.BACKEND_DIR }} && GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o ../build/${{ env.BINARY_NAME }}${{ matrix.ext }} ./cmd/blog-backend)

      # 关键步骤：为每个二进制文件单独上传一个产物
      - name: ⬆️ Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          # 使用平台信息动态命名产物
          name: ${{ env.BINARY_NAME }}${{ matrix.ext }}
          # 只上传刚刚构建好的那一个文件
          path: build/${{ env.BINARY_NAME }}${{ matrix.ext }}